--- src/ld/Options.cpp	2020-10-22 17:00:52.000000000 -0400
+++ src/ld/Options.cpp	2020-10-22 17:02:44.000000000 -0400
@@ -627,11 +627,6 @@
 						setVersionMin(ld::kPlatform_iOS, "6.0");
 				#endif
 					}
-#if SUPPORT_ARCH_arm64e
-					if ( (fArchitecture == CPU_TYPE_ARM64) && (fSubArchitecture == CPU_SUBTYPE_ARM64_E) ) {
-						fSupportsAuthenticatedPointers = true;
-					}
-#endif
 					break;
 			}
 			fLinkSnapshot.recordArch(fArchitectureName);
@@ -4747,10 +4742,6 @@
 		case Options::kDynamicLibrary:
 		case Options::kDynamicBundle:
 			break;
-		case Options::kDyld:
-			// arm64e has support for compressed LINKEDIT.
-			if ( (fArchitecture == CPU_TYPE_ARM64) && (fSubArchitecture == CPU_SUBTYPE_ARM64_E) )
-				break;
 		case Options::kPreload:
 		case Options::kStaticExecutable:
 		case Options::kObjectFile:
@@ -4812,44 +4803,6 @@
 	if ( platforms().minOS(ld::version2010) && (fOutputKind == kDynamicLibrary) )
 		fCanUseUpwardDylib = true;
 
-	if (fArchitecture == CPU_TYPE_ARM64) {
-#if SUPPORT_ARCH_arm64e
-		if (fSubArchitecture == CPU_SUBTYPE_ARM64_E)
-		{
-			// FIXME: Move some of these to arm64
-			fNoLazyBinding = true;
-			switch ( fOutputKind ) {
-				case Options::kDynamicExecutable:
-				case Options::kDynamicLibrary:
-				case Options::kDynamicBundle:
-				case Options::kDyld:
-					fUseLinkedListBinding = true;
-					fUseAuthenticatedStubs = true;
-					break;
-				case Options::kPreload:
-				case Options::kStaticExecutable:
-				case Options::kObjectFile:
-				case Options::kKextBundle:
-					break;
-			}
-			switch ( fOutputKind ) {
-				case Options::kDynamicExecutable:
-				case Options::kDyld:
-				case Options::kDynamicLibrary:
-				case Options::kObjectFile:
-				case Options::kDynamicBundle:
-				case Options::kKextBundle:
-					fSupportsAuthenticatedPointers = true;
-					break;
-				case Options::kStaticExecutable:
-				case Options::kPreload:
-					fSupportsAuthenticatedPointers = false;
-					break;
-			}
-		}
-#endif
-	}
-
 	if ( fMakeThreadedStartsSection && (fArchitecture != CPU_TYPE_ARM64) ) {
 		// Threaded starts isn't valid here so ignore it.
 		warning("-threaded_starts_section ignored ignored for non-arm64");
@@ -4872,10 +4825,6 @@
 			case Options::kPreload:
 				fUseLinkedListBinding = true;
 				fNoLazyBinding = true;
-#if SUPPORT_ARCH_arm64e
-				if ( (fArchitecture == CPU_TYPE_ARM64) && (fSubArchitecture == CPU_SUBTYPE_ARM64_E) )
-					fSupportsAuthenticatedPointers = true;
-#endif
 				break;
 		}
 	}
@@ -5266,11 +5215,6 @@
 			fUnalignedPointerTreatment = Options::kUnalignedPointerIgnore;
 	}
 	else if ( platforms().minOS(ld::iOS_10_0) ) {
-#if SUPPORT_ARCH_arm64e
-		if ( (fArchitecture == CPU_TYPE_ARM64) && (fSubArchitecture == CPU_SUBTYPE_ARM64_E) ) {
-				fUnalignedPointerTreatment = Options::kUnalignedPointerError;
-		} else
-#endif
 			fUnalignedPointerTreatment = Options::kUnalignedPointerWarning;
 	}
 	else {
